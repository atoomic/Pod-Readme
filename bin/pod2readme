#!/usr/bin/env perl

use v5.10.1;

use strict;
use warnings;

use Getopt::Long::Descriptive;
use Module::Load qw/ load /;
use Path::Class;
use Pod::Readme;

=head1 NAME

pod2readme - Generate a README file from POD

=head1 USAGE

    pod2readme [-cfho] [long options...] input-file [output-file] [target]

	Generate a README file from POD

        -b --backup     backup output file
        -o --output     output filename
        -t --target     target type
        -f --format     output format
        -c --stdout     output to stdout (console)
        -h --help       print usage and exit

=head1 SYNOPSIS

    pod2readme -f markdown lib/MyApp.pm

=head1 DESCRIPTION

This utility will use L<Pod::Readme> to extract a F<README> file from
a POD document.

It works by extracting the POD, and then calling the appropriate
filter program to convert the POD to another format.

=head1 OPTIONS

=head2 C<--backup>

By default, C<pod2readme> will back up the output file. To disable
this, use the C<--no-backup> option.

=head2 C<--output>

Specifies the name of the output file. If omitted, it will use the
second command line argument, or default to the C<--target> plus the
corresponding extention of the C<--format>.

For all intents, the default is F<README>.

=head2 C<--target>

The target of the filter, which defaults to "readme".

=head2 C<--format>

The output format, which defaults to "text".

Other supposed formats are "html", "man", "markdown", "pod", "rtf",
and "xhtml".

=head2 C<--stdout>

If enabled, it will output to the console instead of C<--output>.

=head2 C<--help>

Prints the usage and exits.

=head1 SEE ALSO

L<pod2text>, L<pod2markdown>.

=cut

my %FORMATS = (
    'html'     => { class => 'Pod::Simple::HTML',  ext => '.html' },
    'man'      => { class => 'Pod::Man',  ext => '.1' },
    'markdown' => { class => 'Pod::Markdown', ext => '.md' },
    'pod'      => { class => undef, ext => '.pod' },
    'rtf'      => { class => 'Pod::Simple::RTF', ext => '.rtf' },
    'text'     => { class => 'Pod::Text', ext => '' },
    'xhtml'    => { class => 'Pod::Simple::XHTML',  ext => '.xhtml' },
);

sub validate_format {
    my $value = shift;
    if (exists $FORMATS{$value}) {
        return $value;
    } else {
        die "Invalid format: '${value}'\n";
    }
}

my ($opt, $usage) = describe_options(
    '%c %o input-file [output-file] [target]',
    [],
    ['Generate a README file from POD'],
    [],
    [ 'backup|b!'  => "backup output file", { default => 1 } ],
    [ 'output|o'   => "output filename" ],
    [ 'target|t=s' => "target type" ],
    [ 'format|f=s' => "output format",
      { default   => 'text',
        callbacks => { format => \&validate_format },
      } ],
    [ 'stdout|c'   => "output to stdout (console)" ],
    [ 'help|h'     => "print usage and exit" ],
);

die $usage if $opt->help;

my %args = ();

if (my $input = shift @ARGV) {
    $args{input_file} = $input;
}

my $format = $FORMATS{ $opt->format };
unless ($format) {
    say sprintf("Unknown format: '\%s'", $opt->format);
    die $usage;
}

my $output = $opt->output || shift @ARGV;
my $target = $opt->target || shift @ARGV || 'readme';

$output ||=  uc($target) . $format->{ext};

if ($opt->backup && -e $output) {
    file($output)->copy_to($output . '.bak');
}

my $tmp_dir = dir( $ENV{TMP} || '/tmp' );

unless (!$format->{class} && $opt->stdout) {
    $args{output_file} =
        $format->{class} ?
        ($tmp_dir->tempfile( SUFFIX => '.pod', UNLINK => 0 ))[1]
        : $output;
}

my $pf = Pod::Readme->new(%args);

$pf->filter_file;

if (my $class = $format->{class}) {
    load $class;
    my $converter = $class->new()
        or die "Cannot instantiate a ${class} object";

    if ($converter->isa('Pod::Simple')) {

        my $tmp_file = $pf->output_file->stringify;

        close $pf->output_fh
            or die "Unable to close file ${tmp_file}";

        $converter->output_fh($opt->stdout ? \*STDOUT : file($output)->openw );

        $converter->parse_file( $tmp_file );

    } else {

        die "Don't know how to handle a ${class}\n";

    }


}
